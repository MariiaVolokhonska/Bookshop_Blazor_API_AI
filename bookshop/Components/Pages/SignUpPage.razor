@page "/signup"
@rendermode InteractiveServer
@inject UserManagementService UserManagementService
@inject NavigationManager Navigation
@inject FormValidationService ValidationService
@using bookshop.DbModels



<div class="login">
    <h3>SignUp</h3>
    <div class="login-item">
        <div class="error-message">
            <label for="login">Login</label>
            <input type="text" label="Login" @bind="login" id="login" @bind:event="oninput" />
        </div>
        <div class="error-message">
            <span class="error-message" style="color: red;" hidden="@IsLoginValid">Login must be at least 8 characters.</span>
        </div>
        
        
    </div>
    <div class="login-item">
        
        <label for="address">Address</label>
        <input type="text" label="Address" @bind="address" id="address"/>
    </div>

    <div class="login-item">
        <div class="error-message">
            <label for="phone">Phone Number</label>
            <input type="text" label="Phone" @bind="phoneNumber" id="phone" @bind:event="oninput" />
        </div>
        <div class="error-message">
            <span class="error-message" style="color: red;" hidden="@IsPhoneValid">Phone number must be exactly 9 digits.</span>
        </div>
    </div>

    <div class="login-item">
        <div class="error-message">
            <label for="password">Password</label>
            <input type="password" label="Password" @bind="password" id="password" @bind:event="oninput" />
        </div>
        <div class="error-message">
            <span class="error-message" style="color: red;" hidden="@IsPasswordValid">
                Password must be at least 8 characters, include a capital letter and a special character.
            </span>
        </div> 
    </div>

    <button @onclick="SignUpUser" disabled="@(!IsFormValid)">SignUp</button>
</div>

@code {
    private User user;
    private string? login = "";
    private string? password = "";
    private string? phoneNumber = "";
    private string? address = "";

    private bool IsLoginValid => ValidationService.ValidateLogin(login);
    private bool IsPhoneValid => ValidationService.ValidatePhoneNumber(phoneNumber);
    private bool IsPasswordValid => ValidationService.ValidatePassword(password);
    private bool IsFormValid => IsLoginValid && IsPhoneValid && IsPasswordValid;
   
    public async Task SignUpUser()
    {
       
        if (IsFormValid)
        {
            if (!String.IsNullOrEmpty(login) && !String.IsNullOrEmpty(address) && !String.IsNullOrEmpty(phoneNumber) && !String.IsNullOrEmpty(password))
            {
                user = new User
                    {
                        Login = login,
                        Address = address,
                        PhoneNumber = phoneNumber,
                        Password = password
                    };
                await UserManagementService.CreateUser(user);

                Navigation.NavigateTo($"/login", forceLoad: true);
            }
        }
         
    }

}