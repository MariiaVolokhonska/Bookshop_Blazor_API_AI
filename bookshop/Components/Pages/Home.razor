@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<div class="funcs">
    <div>
        <img src="/pics/logo.png" style="width:100px; height:100px;" />
    </div>
    <div>
        <input type="text" @bind="inputText" />
        <button @onclick="(e)=>SearchForBookWithTitle(inputText)">Search</button>
    </div>

    <div>
        <NavLink href="cart-page">
            <img src="/pics/cart.png" style="width:35px; height:35px;" />
        </NavLink>
    </div>

</div>

<section id="section-books-categories">
    <div class="cont-b-c">

        <aside>
            <div class="cat-block">
                <h2>Categories</h2>
                @if (categoriesTOP10 == null)
                {
                    <h2>Loading...</h2>
                }
                else
                {
                    <div class="cat-menu">


                        @foreach (Category category in categoriesTOP10)
                        {
                            <div class="cat">

                                <span>@category.Name</span>

                                <input type="checkbox" @onchange="(e) => OnCategoryChange(category.Name,(bool)e.Value)" />


                            </div>
                        }
                    </div>
                }

                <button @onclick="ApplyCategories">Apply</button>

            </div>
        </aside>


        <article class="content px-4">
            <h2>Best Sellers</h2>
            @if (booksToShow == null)
            {
                <p>Loading...</p>
            }
            else
            {

                <div class="books">
                    @foreach (var book in booksToShow)
                    {
                        <div class="book-item" >
                                <div @onclick="(e) =>OpenBookDetails(book)">
                                <div class="item-element">
                                    <img src="@($"{imageUrlPart}{book.Image}")" style="width:20%; height:25%;" />
                                </div>
                                <div class="item-element">
                                    @book.Title
                                </div>
                                <div>
                                    @book.Genre
                                </div>
                                </div>
                            
                            <button @onclick="(e)=>AddToCart(book)" class="bt">Add to cart</button>
                        </div>
                        

                    }
                </div>


            }
        </article>
    </div>

</section>



@code{


    BooksAPI apiB = new BooksAPI();
    string imageUrlPart = "https://wolnelektury.pl/media/";
    private List<Book>? booksToShow;
    private List<string> tempCategories = new List<string>(); // do tego jak przycisk Apply pressed, tymczasowe kategorie
    private List<string> appliedCategories = new List<string>();
    bool checkedValue = false;
    private string inputText = "";
    List<Book> books;




    private List<Category>? categoriesTOP10;
    protected override async Task OnInitializedAsync()
    {
        List<Category> categories = await apiB.GetAllGenres();
        categoriesTOP10 = categories.Take(10).ToList();
        books = await apiB.GetAllBooks();
        booksToShow = SelectTOP10Books(books);
       
    }
    private List<Book> SelectTOP10Books(List<Book> books)
    {
        return books.Take(10).ToList();
    }
    private List<Book> SelectBooksFilteredWithCategories(List<Book> books)
    {
        return null;
    }
    void OpenBookDetails(Book book)
    {
        Navigation.NavigateTo($"/book-details?title={Uri.EscapeDataString(book.Title)}");
    }
    void AddToCart(Book book)
    {
        Navigation.NavigateTo($"/cart-page?title={Uri.EscapeDataString(book.Title)}");
    }

    private void OnCategoryChange(string category, bool isChecked)
    {
        if (isChecked)
        {
            
            if (!tempCategories.Contains(category))
                tempCategories.Add(category);
            Console.WriteLine($"Added: {category}");
        }
        else
        {
            
            if (tempCategories.Contains(category))
                tempCategories.Remove(category);
            Console.WriteLine($"Removed: {category}");
        }
    }


    private async Task ApplyCategories()
    {
        
        appliedCategories = new List<string>(tempCategories); 
        
        if (appliedCategories == null || !appliedCategories.Any())
        {

            booksToShow = SelectTOP10Books(books);
        }
        else
        {

            booksToShow = books.Where(book => appliedCategories.Any(selected => selected.Equals(book.Genre))).ToList();
            Console.WriteLine($"Примененные категории: {string.Join(", ", appliedCategories)}");
            Console.WriteLine($"Книг после фильтрации: {booksToShow.Count}");
            StateHasChanged();
            
        }
    }
    void SearchForBookWithTitle(string name)
    {
        Navigation.NavigateTo($"/book-details?title={Uri.EscapeDataString(name)}");
    }


}